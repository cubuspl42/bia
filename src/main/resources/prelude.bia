external def until(start : Number, end : Number): List<Number>

external def to(start : Number, end : Number): List<Number>

external def filter(l : List<Number>, test : (e : Number) : Boolean): List<Number>

external def mul:Bi(x : BigInteger, y : BigInteger): BigInteger

external def consLazy(head : Number, tail : () : Sequence<Number>): Sequence<Number>

external def concat:Sq(a : Sequence<Number>, b : Sequence<Number>): Sequence<Number>

external def takeWhile:Sq(s : Sequence<Number>, test : (n : Number) : Boolean): Sequence<Number>

external def filter:Sq(s : Sequence<Number>, test : (e : Number) : Boolean): Sequence<Number>

external def sum:Sq(s : Sequence<Number>): Number

external def seqOf(e1 : Number, e2 : Number): Sequence<Number>

external def fold:L(
    l : List<Number>,
    initial : List<Number>,
    accumulate : (acc : List<Number>, e : Number) : Number
): List<Number>

external def sqrt(x : Number): Number

external def firstWhereOrNull(l : List<Number>, test : (e : Number) : Boolean): Number?

external def orElse(n : Number?, default : () : Number): Number

external def product:L2(
    l1 : List<Number>,
    l2 : List<Number>,
    transform : (e1 : Number, e2 : Number) : Number
): List<Number>

external def concat:L(a : List<Number>, b : List<Number>): List<Number>

external def listOf(e1 : Number): List<Number>

external def <A> emptyList(): List<A>

external def <A> drop:L(l : List<A>, n : Number): List<A>

external def dropLast:L(l : List<Number>, n : Number): List<Number>

external def size:L(l : List<Number>): Number

external def <A> first:L(l : List<A>): A

external def last:L(l : List<Number>): Number

external def max:L(l : List<Number>): Number

external def <A> cons:L(head : A, tail : List<A>): List<A>
