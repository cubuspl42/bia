singleton None

union Option = <A> A #Some | None

val some = <A> (a : A) -> Option<A> => a #Some

val none = <A> () -> Option<A> => None #None

val Option:map = <A> (
    this : Option<A>
) => <B> (
    f : (a : A) -> B
) -> Option<B> => match this -> Option<B> {
    case Some => f(untag this) #Some
    case None => None # None
}

val main = () => {
    return none<Number>()
        :Option:map((n : Number) => n * 2)
}
